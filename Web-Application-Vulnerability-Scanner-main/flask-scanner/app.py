from flask import Flask, render_template, request, redirect, url_for, session
from core import WebVulnerabilityScanner
import os
import json

app = Flask(__name__)
app.secret_key = os.urandom(24) # Used for session management

# Dummy vulnerable test application (for demonstration)
@app.route('/vulnerable-app/')
def vulnerable_index():
    return render_template('vulnerable_index.html')

@app.route('/vulnerable-app/search', methods=['GET'])
def vulnerable_search():
    query = request.args.get('query', '')
    # Simulate Reflected XSS
    return f"You searched for: {query}<br><a href='/vulnerable-app/'>Back</a>"

@app.route('/vulnerable-app/login', methods=['GET', 'POST'])
def vulnerable_login():
    error = None
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        # Simulate SQL Injection vulnerability in login (VERY basic, for demo)
        if "'" in username or "\"" in username or "OR" in username.upper():
            error = "Potential SQLi detected. Login failed."
        elif username == 'admin' and password == 'password':
            return "<h1>Login Successful!</h1>"
        else:
            error = "Invalid credentials."
    return render_template('vulnerable_login.html', error=error)

# Main scanner routes
@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        target_url = request.form['target_url']
        if not target_url.startswith('http://') and not target_url.startswith('https://'):
            target_url = 'http://' + target_url # Prepend http:// if missing
        session['target_url'] = target_url
        return redirect(url_for('scan_results'))
    return render_template('index.html')

@app.route('/scan_results')
def scan_results():
    target_url = session.get('target_url')
    if not target_url:
        return redirect(url_for('index'))

    # Initialize and run scanner
    scanner = WebVulnerabilityScanner(target_url, delay=0.5) # Be polite with 0.5 sec delay
    vulnerabilities = scanner.crawl_and_scan(max_links=20) # Limit crawling for quick demo

    # Save report
    report_filename = f"static/reports/report_{target_url.replace('http://', '').replace('https://', '').replace('/', '_')}.json"
    os.makedirs(os.path.dirname(report_filename), exist_ok=True)
    with open(report_filename, 'w') as f:
        json.dump(vulnerabilities, f, indent=4)

    return render_template('report.html', target_url=target_url, vulnerabilities=vulnerabilities)

if __name__ == '__main__':
    # Ensure the reports directory exists
    os.makedirs('static/reports', exist_ok=True)
    app.run(debug=True)